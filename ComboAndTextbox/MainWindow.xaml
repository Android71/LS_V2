<Window x:Class="ComboAndTextbox.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:ComboAndTextbox"
        mc:Ignorable="d"
        Title="MainWindow" Height="350" Width="525">
    <!--<Window.Resources>
        --><!-- This is the area which contains the selected item in the ComboBox --><!--

        <ControlTemplate x:Key="CBTextBoxTemplate" TargetType="{x:Type TextBox}">
            --><!-- This must be named as PART_ContentHost --><!--
            <Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}"/>
        </ControlTemplate>


        <Style x:Key="ScrollViewerStyle1" TargetType="{x:Type ScrollViewer}" BasedOn="{x:Null}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ScrollViewer}">
                        <Grid Background="{TemplateBinding Background}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <ScrollContentPresenter Grid.Column="0" Grid.Row="0" Margin="{TemplateBinding Padding}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" CanContentScroll="{TemplateBinding CanContentScroll}"/>

                            --><!-- The visibility of the ScrollBars is controlled by the implementation fo the control --><!--
                            <ScrollBar Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Grid.Column="0" Grid.Row="1" x:Name="PART_HorizontalScrollBar" Style="{DynamicResource SimpleScrollBar}" Orientation="Horizontal" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}" Minimum="0" Maximum="{TemplateBinding ScrollableWidth}"/>
                            <ScrollBar Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Grid.Column="1" Grid.Row="0" x:Name="PART_VerticalScrollBar" Style="{DynamicResource SimpleScrollBar}" Orientation="Vertical" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}" Minimum="0" Maximum="{TemplateBinding ScrollableHeight}"/>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        --><!-- Simple ComboBox 
    This uses the ComboBoxToggleButton to expand and collapse a Popup control
    SimpleScrollViewer to allow items to be scrolled and SimpleComboBoxItem to define the look of each item 
    The Popup shows a list of items in a StackPanel--><!--

        <Style x:Key="ComboBoxStyle1" TargetType="{x:Type ComboBox}">
            <Setter Property="SnapsToDevicePixels" Value="true"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ComboBox}">
                        <Grid>
                            --><!-- The ToggleButton is databound to the ComboBox itself to toggle IsDropDownOpen --><!--
                            <ToggleButton Grid.Column="2" Template="{DynamicResource CBToggleButtonTemplate1}" x:Name="ToggleButton" Focusable="false" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" ClickMode="Press"/>
                            <ContentPresenter HorizontalAlignment="Left" Margin="3,3,23,3" x:Name="ContentSite" VerticalAlignment="Center" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" IsHitTestVisible="False"/>

                            --><!-- The TextBox must be named PART_EditableTextBox or ComboBox will not recognize it --><!--
                            <TextBox  x:Name="PART_EditableTextBox" Visibility="Hidden" Template="{DynamicResource CBTextBoxTemplate}" HorizontalAlignment="Left" Margin="3,3,23,3" Style="{x:Null}" VerticalAlignment="Center" Focusable="True" Background="Transparent" IsReadOnly="{TemplateBinding IsReadOnly}"/>

                            --><!-- The Popup shows the list of items in the ComboBox. IsOpen is databound to IsDropDownOpen which is toggled via the ComboBoxToggleButton --><!--
                            <Popup IsOpen="{TemplateBinding IsDropDownOpen}"
                                   Placement="Bottom"
                                   x:Name="Popup"
                                   Focusable="False" AllowsTransparency="True" 
                                   PopupAnimation="Slide" >
                                <Grid  MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{TemplateBinding ActualWidth}" x:Name="DropDown" SnapsToDevicePixels="True">
                                    <Border x:Name="DropDownBorder" 
                                            Background="{DynamicResource WindowBackgroundBrush}" 
                                            BorderBrush="{DynamicResource SolidBorderBrush}" 
                                            
                                            BorderThickness="1"/>
                                    <ScrollViewer Margin="4,6,4,6" Style="{DynamicResource ScrollViewerStyle1}" SnapsToDevicePixels="True" HorizontalScrollBarVisibility="Visible" VerticalScrollBarVisibility="Auto" CanContentScroll="True">

                                        --><!-- The StackPanel is used to display the children by setting IsItemsHost to be True --><!--
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained"/>

                                    </ScrollViewer>
                                </Grid>
                            </Popup>
                        </Grid>
                        <ControlTemplate.Triggers>
                            --><!-- This forces the DropDown to have a minimum size if it is empty --><!--
                            <Trigger Property="HasItems" Value="false">
                                <Setter Property="MinHeight" Value="95" TargetName="DropDownBorder"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                            </Trigger>
                            <Trigger Property="IsGrouping" Value="true">
                                <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                            </Trigger>
                            <Trigger Property="AllowsTransparency" SourceName="Popup" Value="true">
                                <Setter Property="CornerRadius" Value="4" TargetName="DropDownBorder"/>
                                <Setter Property="Margin" Value="0,2,0,0" TargetName="DropDownBorder"/>
                            </Trigger>
                            <Trigger Property="IsEditable" Value="true">
                                <Setter Property="IsTabStop" Value="false"/>
                                <Setter Property="Visibility" Value="Visible" TargetName="PART_EditableTextBox"/>
                                <Setter Property="Visibility" Value="Hidden" TargetName="ContentSite"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="OverridesDefaultStyle" Value="False"/>
        </Style>

        <ControlTemplate x:Key="CBToggleButtonTemplate1" TargetType="{x:Type ToggleButton}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition/>
                    <ColumnDefinition Width="20"/>
                </Grid.ColumnDefinitions>
                <Rectangle Grid.ColumnSpan="2" HorizontalAlignment="Stretch" x:Name="Rectangle" VerticalAlignment="Stretch" Width="Auto" Height="Auto" RadiusX="0" RadiusY="0" Fill="{DynamicResource DarkBrush}" Stroke="{DynamicResource LightGrayBrush}"/>
                --><!--<Border Name="border" Grid.Column="0" BorderBrush="Transparent" BorderThickness="0,0,1,0"/>-->
                <!--<Rectangle Grid.Column="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="Auto" Height="Auto" RadiusX="0" RadiusY="0" Fill="{DynamicResource DarkBrush}" Stroke="{DynamicResource LightGrayBrush}"/>--><!--
                <Path Grid.Column="1" HorizontalAlignment="Center" x:Name="Arrow" VerticalAlignment="Center" Fill="{DynamicResource LightGrayBrush}" Data="M 0 0 L 4 4 L 8 0 Z"/>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="IsMouseOver" Value="true">
                    <Setter Property="Stroke" Value="{DynamicResource BlueAccentBrush}" TargetName="Rectangle"/>
                    --><!--<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource BlueAccentBrush}"/>--><!--
                    <Setter Property="Fill" TargetName="Arrow" Value="{DynamicResource BlueAccentBrush}"/>
                </Trigger>
                <Trigger Property="IsChecked" Value="true">
                    --><!--<Setter Property="Fill" Value="{DynamicResource PressedBrush}" TargetName="Rectangle"/>--><!--
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Fill" Value="{DynamicResource DisabledBackgroundBrush}" TargetName="Rectangle"/>
                    <Setter Property="Stroke" Value="{DynamicResource DisabledBorderBrush}" TargetName="Rectangle"/>
                    <Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}"/>
                    <Setter Property="Fill" Value="{DynamicResource DisabledForegroundBrush}" TargetName="Arrow"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

    </Window.Resources>-->


    <Grid Background="{DynamicResource VeryDarkBrush}">
        <ComboBox x:Name="comboBox" HorizontalAlignment="Left" Margin="85,50,0,0" Style="{DynamicResource ComboBoxStyle1}"
                 MaxDropDownHeight="150" VerticalAlignment="Top" Width="120" IsReadOnly="True">
            <ComboBoxItem>Item1</ComboBoxItem>
            <ComboBoxItem>Item1</ComboBoxItem>
            <ComboBoxItem>Item1</ComboBoxItem>
            <ComboBoxItem>Item1</ComboBoxItem>
            <ComboBoxItem>Item1</ComboBoxItem>
            <ComboBoxItem>Item1</ComboBoxItem>
            <ComboBoxItem>Item1</ComboBoxItem>
            <ComboBoxItem>Item1</ComboBoxItem>
            <ComboBoxItem>Item1</ComboBoxItem>
            <ComboBoxItem>Item1</ComboBoxItem>
            <ComboBoxItem>Item1</ComboBoxItem>
        </ComboBox>

    </Grid>
</Window>
